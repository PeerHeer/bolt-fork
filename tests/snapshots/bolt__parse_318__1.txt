_bolt_lineno = [1, 7], [1, 2]
_bolt_memo_storage_bdd640fb06671ad11c80317fa3b1799d = None
_bolt_helper_children = _bolt_runtime.helpers['children']
_bolt_helper_replace = _bolt_runtime.helpers['replace']
with _bolt_runtime.scope() as _bolt_var0:
    def f():
        global _bolt_memo_storage_bdd640fb06671ad11c80317fa3b1799d
        if _bolt_memo_storage_bdd640fb06671ad11c80317fa3b1799d is None:
            _bolt_memo_storage_bdd640fb06671ad11c80317fa3b1799d = _bolt_runtime.memo.registry[__file__][_bolt_refs[0], 0]
        _bolt_memo_invocation_path_bdd640fb06671ad11c80317fa3b1799d = _bolt_runtime.get_nested_location()
        _bolt_memo_invocation_bdd640fb06671ad11c80317fa3b1799d = _bolt_memo_storage_bdd640fb06671ad11c80317fa3b1799d[(_bolt_memo_invocation_path_bdd640fb06671ad11c80317fa3b1799d, )]
        if _bolt_memo_invocation_bdd640fb06671ad11c80317fa3b1799d.cached:
            _bolt_runtime.memo.restore(_bolt_runtime, _bolt_memo_invocation_bdd640fb06671ad11c80317fa3b1799d)
        else:
            with _bolt_runtime.memo.record(_bolt_runtime, _bolt_memo_invocation_bdd640fb06671ad11c80317fa3b1799d, _bolt_memo_invocation_path_bdd640fb06671ad11c80317fa3b1799d, __name__):
                pass
_bolt_var1 = _bolt_helper_replace(_bolt_refs[1], commands=_bolt_helper_children(_bolt_var0))
---
output = _bolt_var1
---
_bolt_refs[0]
<class 'bolt.ast.AstMemo'>
  location: SourceLocation(pos=13, lineno=2, colno=5)
  end_location: SourceLocation(pos=31, lineno=3, colno=13)
  identifier: 'memo'
  arguments:
    <class 'mecha.ast.AstRoot'>
  persistent_id: UUID('bdd640fb-0667-1ad1-1c80-317fa3b1799d')
_bolt_refs[1]
<class 'mecha.ast.AstRoot'>
  location: SourceLocation(pos=0, lineno=1, colno=1)
  end_location: SourceLocation(pos=31, lineno=3, colno=13)
  commands:
    <class 'mecha.ast.AstCommand'>

_bolt_lineno = [1, 22], [1, 3]
_bolt_helper_get_dup = _bolt_runtime.helpers['get_dup']
_bolt_helper_branch = _bolt_runtime.helpers['branch']
_bolt_helper_operator_not = _bolt_runtime.helpers['operator_not']
_bolt_helper_get_rebind = _bolt_runtime.helpers['get_rebind']
_bolt_helper_children = _bolt_runtime.helpers['children']
_bolt_helper_replace = _bolt_runtime.helpers['replace']
with _bolt_runtime.scope() as _bolt_var12:
    _bolt_var0 = True
    _bolt_var1 = _bolt_var0
    _bolt_var2 = _bolt_helper_get_dup(_bolt_var0)
    if _bolt_var2 is not None:
        _bolt_var1 = _bolt_var2()
    with _bolt_helper_branch(_bolt_var1) as _bolt_condition:
        if _bolt_condition:
            _bolt_runtime.commands.extend(_bolt_refs[0].commands)
    _bolt_var1 = _bolt_helper_operator_not(_bolt_var1)
    _bolt_var3 = _bolt_var1
    with _bolt_helper_branch(_bolt_var3) as _bolt_condition:
        if _bolt_condition:
            _bolt_var4 = True
            _bolt_var5 = _bolt_helper_operator_not(_bolt_var4)
            _bolt_var6 = _bolt_helper_get_dup(_bolt_var4)
            if _bolt_var6 is not None:
                _bolt_var4 = _bolt_var6()
            _bolt_var7 = _bolt_var5
            with _bolt_helper_branch(_bolt_var7) as _bolt_condition:
                if _bolt_condition:
                    _bolt_var8 = False
                    if _bolt_var6 is not None:
                        _bolt_rebind = _bolt_helper_get_rebind(_bolt_var4)
                        _bolt_var4 = _bolt_var8
                        if _bolt_rebind is not None:
                            _bolt_var4 = _bolt_rebind(_bolt_var4)
                    else:
                        _bolt_var4 = _bolt_var8
            _bolt_var9 = _bolt_var4
            _bolt_var10 = _bolt_helper_get_dup(_bolt_var4)
            if _bolt_var10 is not None:
                _bolt_var9 = _bolt_var10()
            with _bolt_helper_branch(_bolt_var9) as _bolt_condition:
                if _bolt_condition:
                    _bolt_runtime.commands.extend(_bolt_refs[1].commands)
            _bolt_var9 = _bolt_helper_operator_not(_bolt_var9)
            _bolt_var11 = _bolt_var9
            with _bolt_helper_branch(_bolt_var11) as _bolt_condition:
                if _bolt_condition:
                    _bolt_runtime.commands.extend(_bolt_refs[2].commands)
_bolt_var13 = _bolt_helper_replace(_bolt_refs[3], commands=_bolt_helper_children(_bolt_var12))
---
output = _bolt_var13
---
_bolt_refs[0]
<class 'mecha.ast.AstRoot'>
  location: SourceLocation(pos=13, lineno=2, colno=5)
  end_location: SourceLocation(pos=22, lineno=2, colno=14)
  commands:
    <class 'mecha.ast.AstCommand'>
_bolt_refs[1]
<class 'mecha.ast.AstRoot'>
  location: SourceLocation(pos=47, lineno=4, colno=5)
  end_location: SourceLocation(pos=56, lineno=4, colno=14)
  commands:
    <class 'mecha.ast.AstCommand'>
_bolt_refs[2]
<class 'mecha.ast.AstRoot'>
  location: SourceLocation(pos=67, lineno=6, colno=5)
  end_location: SourceLocation(pos=76, lineno=6, colno=14)
  commands:
    <class 'mecha.ast.AstCommand'>
_bolt_refs[3]
<class 'mecha.ast.AstRoot'>
  location: SourceLocation(pos=0, lineno=1, colno=1)
  end_location: SourceLocation(pos=76, lineno=6, colno=14)
  commands:
    <class 'mecha.ast.AstCommand'>
    <class 'mecha.ast.AstCommand'>

_bolt_lineno = [1, 7, 9], [1, 2, 3]
_bolt_helper_macro_call = _bolt_runtime.helpers['macro_call']
_bolt_helper_children = _bolt_runtime.helpers['children']
_bolt_helper_replace = _bolt_runtime.helpers['replace']
with _bolt_runtime.scope() as _bolt_var2:
    def _bolt_macro0():
        _bolt_var0 = _bolt_helper_macro_call(_bolt_runtime, _bolt_macro0, _bolt_refs[0])
        _bolt_runtime.commands.extend(_bolt_var0)
    _bolt_var1 = _bolt_helper_macro_call(_bolt_runtime, _bolt_macro0, _bolt_refs[1])
    _bolt_runtime.commands.extend(_bolt_var1)
_bolt_var3 = _bolt_helper_replace(_bolt_refs[2], commands=_bolt_helper_children(_bolt_var2))
---
output = _bolt_var3
---
_bolt_refs[0]
<class 'bolt.ast.AstMacroCall'>
  location: SourceLocation(pos=15, lineno=2, colno=5)
  end_location: SourceLocation(pos=18, lineno=2, colno=8)
  identifier: 'foo'
  arguments:
    <empty>
_bolt_refs[1]
<class 'bolt.ast.AstMacroCall'>
  location: SourceLocation(pos=19, lineno=3, colno=1)
  end_location: SourceLocation(pos=22, lineno=3, colno=4)
  identifier: 'foo'
  arguments:
    <empty>
_bolt_refs[2]
<class 'mecha.ast.AstRoot'>
  location: SourceLocation(pos=0, lineno=1, colno=1)
  end_location: SourceLocation(pos=23, lineno=4, colno=1)
  commands:
    <class 'bolt.ast.AstMacro'>
    <class 'bolt.ast.AstMacroCall'>

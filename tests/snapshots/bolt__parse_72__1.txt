_bolt_lineno = [1, 11, 14], [1, 3, 4]
_bolt_helper_missing = _bolt_runtime.helpers['missing']
_bolt_helper_children = _bolt_runtime.helpers['children']
_bolt_helper_replace = _bolt_runtime.helpers['replace']
with _bolt_runtime.scope() as _bolt_var4:
    def foo(a=_bolt_helper_missing, b=_bolt_helper_missing, c=_bolt_helper_missing):
        if a is _bolt_helper_missing:
            _bolt_var0 = 1
            a = _bolt_var0
        if b is _bolt_helper_missing:
            _bolt_var1 = a
            b = _bolt_var1
        if c is _bolt_helper_missing:
            _bolt_var2 = a
            _bolt_var3 = b
            _bolt_var2 = _bolt_var2 + _bolt_var3
            c = _bolt_var2
        _bolt_runtime.commands.extend(_bolt_refs[0].commands)
_bolt_var5 = _bolt_helper_replace(_bolt_refs[1], commands=_bolt_helper_children(_bolt_var4))
---
output = _bolt_var5
---
_bolt_refs[0]
<class 'mecha.ast.AstRoot'>
  location: SourceLocation(pos=47, lineno=6, colno=5)
  end_location: SourceLocation(pos=56, lineno=6, colno=14)
  commands:
    <class 'mecha.ast.AstCommand'>
_bolt_refs[1]
<class 'mecha.ast.AstRoot'>
  location: SourceLocation(pos=0, lineno=1, colno=1)
  end_location: SourceLocation(pos=56, lineno=6, colno=14)
  commands:
    <class 'mecha.ast.AstCommand'>

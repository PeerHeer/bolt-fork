_mecha_lineno = [1, 11, 14], [1, 3, 4]
_mecha_helper_missing = _mecha_runtime.helpers['missing']
_mecha_helper_children = _mecha_runtime.helpers['children']
_mecha_helper_replace = _mecha_runtime.helpers['replace']
with _mecha_runtime.scope() as _mecha_var4:
    def foo(a=_mecha_helper_missing, b=_mecha_helper_missing, c=_mecha_helper_missing):
        if a is _mecha_helper_missing:
            _mecha_var0 = 1
            a = _mecha_var0
        if b is _mecha_helper_missing:
            _mecha_var1 = a
            b = _mecha_var1
        if c is _mecha_helper_missing:
            _mecha_var2 = a
            _mecha_var3 = b
            _mecha_var2 = _mecha_var2 + _mecha_var3
            c = _mecha_var2
        _mecha_runtime.commands.extend(_mecha_refs[0].commands)
_mecha_var5 = _mecha_helper_replace(_mecha_refs[1], commands=_mecha_helper_children(_mecha_var4))
---
output = _mecha_var5
---
_mecha_refs[0]
<class 'mecha.ast.AstRoot'>
  location: SourceLocation(pos=47, lineno=6, colno=5)
  end_location: SourceLocation(pos=56, lineno=6, colno=14)
  commands:
    <class 'mecha.ast.AstCommand'>
_mecha_refs[1]
<class 'mecha.ast.AstRoot'>
  location: SourceLocation(pos=0, lineno=1, colno=1)
  end_location: SourceLocation(pos=56, lineno=6, colno=14)
  commands:
    <class 'mecha.ast.AstCommand'>

_bolt_lineno = [1], [1]
_bolt_helper_resolve_nested_location = _bolt_runtime.helpers['resolve_nested_location']
_bolt_helper_interpolate_resource_location = _bolt_runtime.helpers['interpolate_resource_location']
_bolt_helper_children = _bolt_runtime.helpers['children']
_bolt_helper_replace = _bolt_runtime.helpers['replace']
with _bolt_runtime.scope() as _bolt_var2:
    _bolt_var0 = 'bar'
    _bolt_var1 = _bolt_helper_resolve_nested_location(_bolt_runtime, 'foo{:_<5}'.format(_bolt_var0))
    _bolt_var1 = _bolt_helper_interpolate_resource_location(_bolt_var1, _bolt_refs[0])
    _bolt_runtime.commands.append(_bolt_helper_replace(_bolt_refs[1], arguments=_bolt_helper_children([_bolt_var1])))
_bolt_var3 = _bolt_helper_replace(_bolt_refs[2], commands=_bolt_helper_children(_bolt_var2))
---
output = _bolt_var3
---
_bolt_refs[0]
<class 'bolt.ast.AstInterpolation'>
  location: SourceLocation(pos=9, lineno=1, colno=10)
  end_location: SourceLocation(pos=25, lineno=1, colno=26)
  prefix: None
  unpack: None
  converter: 'resource_location'
  value:
    <class 'bolt.ast.AstNestedLocation'>
_bolt_refs[1]
<class 'mecha.ast.AstCommand'>
  location: SourceLocation(pos=0, lineno=1, colno=1)
  end_location: SourceLocation(pos=25, lineno=1, colno=26)
  identifier: 'function:name'
  arguments:
    <class 'bolt.ast.AstInterpolation'>
_bolt_refs[2]
<class 'mecha.ast.AstRoot'>
  location: SourceLocation(pos=0, lineno=1, colno=1)
  end_location: SourceLocation(pos=26, lineno=2, colno=1)
  commands:
    <class 'mecha.ast.AstCommand'>

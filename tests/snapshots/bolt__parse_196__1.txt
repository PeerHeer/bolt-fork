_bolt_lineno = [1, 9, 17, 23, 24], [1, 2, 3, 5, 6]
_bolt_helper_get_dup = _bolt_runtime.helpers['get_dup']
_bolt_helper_branch = _bolt_runtime.helpers['branch']
_bolt_helper_children = _bolt_runtime.helpers['children']
_bolt_helper_operator_not = _bolt_runtime.helpers['operator_not']
_bolt_helper_replace = _bolt_runtime.helpers['replace']
with _bolt_runtime.scope() as _bolt_var0:
    def foo(value):
        _bolt_var0 = value
        _bolt_var1 = _bolt_var0
        _bolt_var2 = _bolt_helper_get_dup(_bolt_var0)
        if _bolt_var2 is not None:
            _bolt_var1 = _bolt_var2()
        with _bolt_helper_branch(_bolt_var1) as _bolt_condition:
            if _bolt_condition:
                _bolt_var3 = 1
                result = _bolt_var3
        _bolt_var1 = _bolt_helper_operator_not(_bolt_var1)
        _bolt_var4 = _bolt_var1
        with _bolt_helper_branch(_bolt_var4) as _bolt_condition:
            if _bolt_condition:
                _bolt_var5 = 0
                result = _bolt_var5
        _bolt_var6 = result
        return _bolt_var6
_bolt_var1 = _bolt_helper_replace(_bolt_refs[0], commands=_bolt_helper_children(_bolt_var0))
---
output = _bolt_var1
---
_bolt_refs[0]
<class 'mecha.ast.AstRoot'>
  location: SourceLocation(pos=0, lineno=1, colno=1)
  end_location: SourceLocation(pos=95, lineno=6, colno=18)
  commands:
    <class 'mecha.ast.AstCommand'>

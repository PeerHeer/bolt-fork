_bolt_lineno = [1], [1]
_bolt_helper_missing = _bolt_runtime.helpers['missing']
_bolt_helper_children = _bolt_runtime.helpers['children']
_bolt_helper_replace = _bolt_runtime.helpers['replace']
with _bolt_runtime.scope() as _bolt_var10:
    _bolt_var0 = str
    _bolt_var1 = int
    _bolt_var2 = list
    _bolt_var3 = int
    _bolt_var2 = _bolt_var2[_bolt_var3]
    _bolt_var4 = None
    _bolt_var2 = _bolt_var2 | _bolt_var4
    _bolt_var5 = float
    _bolt_var6 = object
    _bolt_var7 = tuple
    _bolt_var8 = int
    _bolt_var9 = ...
    _bolt_var7 = _bolt_var7[_bolt_var8, _bolt_var9]
    def f(a: _bolt_var0, /, b: _bolt_var1, c: _bolt_var2 = _bolt_helper_missing, *d: _bolt_var5, **kwargs: _bolt_var6) -> _bolt_var7:
        if c is _bolt_helper_missing:
            _bolt_var10 = None
            c = _bolt_var10
        _bolt_var11 = ...
_bolt_var11 = _bolt_helper_replace(_bolt_refs[0], commands=_bolt_helper_children(_bolt_var10))
---
output = _bolt_var11
---
_bolt_refs[0]
<class 'mecha.ast.AstRoot'>
  location: SourceLocation(pos=0, lineno=1, colno=1)
  end_location: SourceLocation(pos=109, lineno=2, colno=8)
  commands:
    <class 'mecha.ast.AstCommand'>

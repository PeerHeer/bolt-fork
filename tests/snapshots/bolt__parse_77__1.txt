_mecha_lineno = [1, 11], [1, 2]
_mecha_helper_missing = _mecha_runtime.helpers['missing']
_mecha_helper_get_rebind = _mecha_runtime.helpers['get_rebind']
_mecha_helper_children = _mecha_runtime.helpers['children']
_mecha_helper_replace = _mecha_runtime.helpers['replace']
with _mecha_runtime.scope() as _mecha_var2:
    def f(a, b=_mecha_helper_missing):
        if b is _mecha_helper_missing:
            _mecha_var0 = a
            b = _mecha_var0
        _mecha_var1 = a
        _mecha_rebind = _mecha_helper_get_rebind(b)
        b += _mecha_var1
        if _mecha_rebind is not None:
            b = _mecha_rebind(b)
        _mecha_runtime.commands.append(_mecha_refs[0])
_mecha_var3 = _mecha_helper_replace(_mecha_refs[1], commands=_mecha_helper_children(_mecha_var2))
---
output = _mecha_var3
---
_mecha_refs[0]
<class 'mecha.ast.AstCommand'>
  location: SourceLocation(pos=30, lineno=3, colno=5)
  end_location: SourceLocation(pos=37, lineno=3, colno=12)
  identifier: 'say:message'
  arguments:
    <class 'mecha.ast.AstMessage'>
_mecha_refs[1]
<class 'mecha.ast.AstRoot'>
  location: SourceLocation(pos=0, lineno=1, colno=1)
  end_location: SourceLocation(pos=37, lineno=3, colno=12)
  commands:
    <class 'mecha.ast.AstCommand'>

_bolt_lineno = [1, 8, 10, 12], [1, 3, 4, 5]
_bolt_helper_children = _bolt_runtime.helpers['children']
_bolt_helper_macro_call = _bolt_runtime.helpers['macro_call']
_bolt_helper_replace = _bolt_runtime.helpers['replace']
with _bolt_runtime.scope() as _bolt_var3:
    def _bolt_macro0(clause):
        pass
    _bolt_var0 = _bolt_helper_macro_call(_bolt_runtime, _bolt_macro0, _bolt_refs[0])
    _bolt_runtime.commands.extend(_bolt_var0)
    _bolt_var1 = _bolt_helper_macro_call(_bolt_runtime, _bolt_macro0, _bolt_refs[1])
    _bolt_runtime.commands.extend(_bolt_var1)
    _bolt_var2 = _bolt_helper_macro_call(_bolt_runtime, _bolt_macro0, _bolt_refs[2])
    _bolt_runtime.commands.extend(_bolt_var2)
_bolt_var4 = _bolt_helper_replace(_bolt_refs[3], commands=_bolt_helper_children(_bolt_var3))
---
output = _bolt_var4
---
_bolt_refs[0]
<class 'bolt.ast.AstMacroCall'>
  location: SourceLocation(pos=65, lineno=3, colno=1)
  end_location: SourceLocation(pos=104, lineno=3, colno=40)
  identifier: 'hello:subcommand'
  arguments:
    <class 'mecha.ast.AstCommand'>
_bolt_refs[1]
<class 'bolt.ast.AstMacroCall'>
  location: SourceLocation(pos=105, lineno=4, colno=1)
  end_location: SourceLocation(pos=130, lineno=4, colno=26)
  identifier: 'hello:subcommand'
  arguments:
    <class 'mecha.ast.AstCommand'>
_bolt_refs[2]
<class 'bolt.ast.AstMacroCall'>
  location: SourceLocation(pos=131, lineno=5, colno=1)
  end_location: SourceLocation(pos=151, lineno=5, colno=21)
  identifier: 'hello:subcommand'
  arguments:
    <class 'mecha.ast.AstCommand'>
_bolt_refs[3]
<class 'mecha.ast.AstRoot'>
  location: SourceLocation(pos=0, lineno=1, colno=1)
  end_location: SourceLocation(pos=151, lineno=5, colno=21)
  commands:
    <class 'bolt.ast.AstMacro'>
    <class 'bolt.ast.AstMacroCall'>
    <class 'bolt.ast.AstMacroCall'>
    <class 'bolt.ast.AstMacroCall'>
